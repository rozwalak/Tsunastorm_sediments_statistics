ellipse.type = "norm",
ggtheme = theme_bw(),
)
fviz_cluster(res.km, data = df2cluster,
palette = "npg",
ellipse.type = "norm",
ggtheme = theme_bw(),
)
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
scale_colour_brewer(palette = 'Set2') +
stat_ellipse(type = "t",geom = "polygon",alpha = 0.4)
PCA_plot
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
scale_colour_brewer(palette = 'Set2') +
stat_ellipse(type = "t",geom = "polygon",alpha = 0.1)
PCA_plot
fviz_cluster(res.km, data = df2cluster,
palette = "npg",
ellipse.type = "norm",
ggtheme = theme_bw(),
)
# Dimension reduction using PCA
res.pca <- prcomp(df2cluster,  scale = TRUE)
# Coordinates of individuals
ind.coord <- as.data.frame(get_pca_ind(res.pca)$coord)
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord$Species <- df$Species
View(df2cluster)
View(df)
View(ind.coord)
# Coordinates of individuals
pca.data <- data.frame(Sample_name=rownames(res.pca$x),
X=pca$x[,1],
Y=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
View(ind.coord)
# Coordinates of individuals
ind.coord <- data.frame(Sample_name=rownames(res.pca$x),
X=pca$x[,1],
Y=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
View(ind.coord)
# Add Species groups from the original data sett
ind.coord <- merge(metadata, ind.coord)
# Coordinates of individuals
ind.coord <- data.frame(Sample_name=rownames(res.pca$x),
Dim.1=pca$x[,1],
Dim.2=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord <- merge(metadata, ind.coord)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
head(eigenvalue)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Species", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
# Optimal number of clusters
fviz_nbclust(x = df2cluster,
FUNcluster = kmeans,
method = "wss") +
# To draw reference line
geom_vline(xintercept = 6,
linetype = 2) +
# Add subtitle "Elbow method"
labs(subtitle = "Elbow method")
res.km <- kmeans(scale(df2cluster), 4, nstart = 25)
# Optimal number of clusters
fviz_nbclust(x = df2cluster,
FUNcluster = kmeans,
method = "wss") +
# To draw reference line
geom_vline(xintercept = 4,
linetype = 2) +
# Add subtitle "Elbow method"
labs(subtitle = "Elbow method")
set.seed(123)
res.km <- kmeans(scale(df2cluster), 4, nstart = 25)
# K-means clusters showing the group of each individuals
res.km$cluster
fviz_cluster(res.km, data = df2cluster,
palette = "npg",
ellipse.type = "norm",
ggtheme = theme_bw(),
)
fviz_cluster(res.km, data = df2cluster,
palette = "npg",
geom = "point",
ellipse.type = "norm",
ggtheme = theme_bw(),
)
# Dimension reduction using PCA
res.pca <- prcomp(df2cluster,  scale = TRUE)
# Coordinates of individuals
ind.coord <- data.frame(Sample_name=rownames(res.pca$x),
Dim.1=pca$x[,1],
Dim.2=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord <- merge(metadata, ind.coord)
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
head(eigenvalue)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 8)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 1.5,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 3,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
# Optimal number of clusters
fviz_nbclust(x = df2cluster,
FUNcluster = kmeans,
method = "wss") +
# To draw reference line
geom_vline(xintercept = 5,
linetype = 2) +
# Add subtitle "Elbow method"
labs(subtitle = "Elbow method")
set.seed(123)
res.km <- kmeans(scale(df2cluster), 5, nstart = 25)
# K-means clusters showing the group of each individuals
res.km$cluster
fviz_cluster(res.km, data = df2cluster,
palette = "npg",
geom = "point",
ellipse.type = "norm",
ggtheme = theme_bw(),
)
# Dimension reduction using PCA
res.pca <- prcomp(df2cluster,  scale = TRUE)
# Coordinates of individuals
ind.coord <- data.frame(Sample_name=rownames(res.pca$x),
Dim.1=pca$x[,1],
Dim.2=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord <- merge(metadata, ind.coord)
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
head(eigenvalue)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "convex",
shape = "Type_details", size = 3,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3,  legend = "right", ggtheme = theme_bw(),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 6,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 4,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" ) +
guides(shape = guide_legend(title = "Type of sediments")) +
) +
stat_mean(aes(color = cluster), size = 4)
guides(shape = guide_legend(title = "Type of sediments")) +
ggscatter(
ind.coord, x = "Dim.1", y = "Dim.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4) +
guides(shape = guide_legend(title = "Type of sediments"))
# Coordinates of individuals
ind.coord <- data.frame(Sample_name=rownames(res.pca$x),
PC.1=pca$x[,1],
PC.2=pca$x[,2])
# Add clusters obtained using the K-means algorithm
ind.coord$cluster <- factor(res.km$cluster)
# Add Species groups from the original data sett
ind.coord <- merge(metadata, ind.coord)
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
head(eigenvalue)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4) +
scale_colour_brewer(palette = 'Set2')
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4) +
scale_colour_brewer(palette = 'Set2')
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "npg", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("Dim 1 (", variance.percent[1], "% )" ),
ylab = paste0("Dim 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
ggscatter(
ind.coord, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
View(ind.coord)
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_colour_brewer(palette = 'Set2')
PCA_plot
#Plot
ggscatter(
results, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
# Dimension reduction using PCA
res.pca <- prcomp(df2cluster,  scale = TRUE)
# Coordinates of individuals
results <- data.frame(Sample_name=rownames(res.pca$x),
PC.1=pca$x[,1],
PC.2=pca$x[,2])
# Add clusters obtained using the K-means algorithm
results$cluster <- factor(res.km$cluster)
# Add metadata
results <- merge(metadata, ind.coord)
write_excel()
# Percentage of variance explained by dimensions
eigenvalue <- round(get_eigenvalue(res.pca), 1)
variance.percent <- eigenvalue$variance.percent
head(eigenvalue)
#Plot
ggscatter(
results, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
write_excel(results, "output/PCA_clusters.xlsx")
write.xlsx(results, "output/PCA_clusters.xlsx")
library(writexl)
install.packages('writexl')
library(writexl)
write.xlsx(results, "output/PCA_clusters.xlsx")
write_xlsx(results, "output/PCA_clusters.xlsx")
#Plot
ggscatter(
results, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
#Plot
PCA_and_kmeans_clusters <- ggscatter(
results, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
#Plot
PCA_and_kmeans_clusters <- ggscatter(
results, x = "PC.1", y = "PC.2",
color = "cluster", palette = "aaas", ellipse = TRUE, ellipse.type = "euclid",
shape = "Type_details", size = 3.5,  legend = "right", ggtheme = theme_bw(base_size = 18),
xlab = paste0("PC 1 (", variance.percent[1], "% )" ),
ylab = paste0("PC 2 (", variance.percent[2], "% )" )
) +
stat_mean(aes(color = cluster), size = 4)
PCA_and_kmeans_clusters
#save plot file
ggsave("PCA_and_kmeans_clusters.png", plot = PCA_plot, bg = "white", width = 20, height = 10.4, device = "png", path = "output")
#save plot file
ggsave("PCA_and_kmeans_clusters.png", plot = PCA_and_kmeans_clusters, bg = "white", width = 20, height = 10.4, device = "png", path = "output")
library(ggsci)
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
pal_aaas(palette = c("default"), alpha = 1)
library(ggsci)
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_color_aaas()
PCA_plot
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_color_aaas(alpha=0.5)
PCA_plot
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_color_aaas(alpha=0.8)
PCA_plot
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_color_aaas(alpha=0.7)
PCA_plot
# make a plot
PCA_plot <- ggplot(data=merged, aes(x=X, y=Y, shape=Type_general, color = Type_details)) +
geom_point(size=6) +
theme_classic(base_size = 18) +
guides(shape = guide_legend(title = "Type of sediments")) +
guides(color = guide_legend(title = "Sources")) +
xlab(paste("PC 1 (", pca.var.per[1], "% )" )) +
ylab(paste("PC 2 (", pca.var.per[2], "% )" )) +
scale_colour_brewer(palette = 'Set2')
PCA_plot
